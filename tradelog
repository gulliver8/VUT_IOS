#!/bin/bash

export POSIXLY_CORRECT=yes
export LC_NUMERIC=en_US.UTF-8

print_help(){
  echo "Script analyzes records of the stock trading system. It filters s and provides statistics according to user input. Records can be input as .log files or as multiple .log files compressed with gzip. If the script does not receive log files, it expects logs on standard input."
  echo "				"
  echo "Usage:    tradelog [-h|--help]"
  echo "          tradelog [FILTER] [COMMAND] [LOG [LOG2 [...]]"
  echo "                   "
  echo "Commands: list-tick"
  echo "          profit"
  echo "          pos"
  echo "          last-price"
  echo "          hist-ord"
  echo "          graph-pos"
  echo "                   "
  echo "Filters:  -a DATETIME	Format:	[YYYY-MM-DD HH:MM:SS]"
  echo "          -b DATETIME		[YYYY-MM-DD HH:MM:SS]"
  echo "          -t TICKER"
  echo "          -w WIDTH		[natural number]"
}

check_date(){
  if [ "$2" != "[0-9][0-9][0-9][0-9]-[0-1][0-9]-[0-3][0-9]" ];then
    echo "ERROR: Invalid date and time format (YYYY-MM-DD HH:MM:SS)"
    exit 1
  fi
  if [ "$3" != "[0-2][0-9]:[0-5][0-9]:[0-9][0-9]" ];then
    echo "ERROR: Invalid date and time format (YYYY-MM-DD HH:MM:SS)"
    exit 1
  fi
}

check_width(){
  if [ "$WIDTH" != "" ];then
    echo "ERROR: Multiple width commands not supported."
    exit 1
  fi
  if ! [[ $2 =~ ^[0-9][0-9]*$ ]];then
    echo "ERROR: Width value must be a natural number"
    exit 1
  fi
}

COMMAND=""
WIDTH=""
TICKER=""
DATETIME_A="0000-00-00 00:00:00"
DATETIME_B="9999-99-99 99:99:99"
LOGFILES=""
LOGFILES_GZ=""
INPUT=""
FILTER_INPUT=""
OUTPUT=""
TICKER_LIST=""

#command processing
while [ "$#" -gt 0 ]
do
  case "$1" in
  -h | --help)
    print_help
    exit 0
    ;;
  list-tick | profit | pos | last-price | hist-ord | graph-pos)
    COMMAND="$1"
    shift
    ;;
  -w)
    check_width on $2
    WIDTH="$2"
    shift
    shift
    ;;
  -a)
    DATETIME_A="$2 $3"
    check_date
    shift
    shift
    shift
    ;;
  -b)
    DATETIME_B="$2 $3"
    check_date
    shift
    shift
    shift
    ;;
  -t)
    TICKER="$2;$TICKER"
    shift
    shift
    ;;
  *.gz)
    LOGFILES_GZ="$1 $LOGFILES_GZ"
    shift
    ;;
  *.log)
    LOGFILES="$1 $LOGFILES"
    shift
    ;;
  *)
    echo "ERROR: Invalid input"
    exit 1
    ;;
  esac
done

if [ "$LOGFILES_GZ" != "" ];then
  INPUT="$(gzip -d -c $LOGFILES_GZ | cat $LOGFILES - | sort)"
else
  if [ "$LOGFILES" != "" ]; then
    INPUT=$(cat $LOGFILES)
  else
    INPUT=$(cat)
  fi
fi
FILTER_INPUT=$(echo "$INPUT" | awk -v aft="$DATETIME_A" -v bfr="$DATETIME_B" -F ';' '{if ($1 > aft && $1 < bfr) {print $0}}')
if [ "$TICKER" != "" ];then
  FILTER_INPUT=$(echo "$FILTER_INPUT" | awk -v tck="$TICKER" -F ';' 'BEGIN {x = split(tck, tick)}
  {for(i=1; i<=x;i++) if(tick[i] == $2) {print $0}}')
fi
case "$COMMAND" in
  list-tick)
    OUTPUT=$(echo "$FILTER_INPUT" | awk -F ';' '{print $2}' | sort -u)
    ;;
  profit)
    OUTPUT=$(echo "$FILTER_INPUT" | awk -F ';' \
           '{
             if($3 == "buy")
	       {num -= $4 * $6}
	     if($3 == "sell")
	       {num += $4 * $6}
           }END{
             printf("%.2f",num)
           }')
    ;;
  pos)
    OUTPUT=$(echo "$FILTER_INPUT" | awk -F ';' \
	   '{
 	   #array ticks stores value for each ticker
	     if($3 == "buy"){ticks[$2] += $6}
	     if($3 == "sell"){ticks[$2] -= $6}
           #array last price keeps latest price for each ticker
	     if($1 > lastdate[$2]){lastdate[$2] = $1; lastprice[$2]=$4}
           }END{
	   #calculate value of currently held positions and find max value 
	     for(tick in ticks){num[tick]=sprintf("%.2f",ticks[tick]*lastprice[tick]); if(length(num[tick])>maxnum){maxnum=length(num[tick])}}
           #print results 
	     for(tick in ticks){printf("%-9s : %*s\n",tick,maxnum,num[tick])} 
	   }' | sort -r -t':' -nk2)

    ;;
  last-price)
    OUTPUT=$(echo "$FILTER_INPUT" | awk -F ';' \
	   '{
           #find last price of each ticker
	     if($1 > lastdate[$2])
	       {
	         lastdate[$2] = $1
		 lastprices[$2]=$4
	       }
           }END{
	   #find max price to indent numbers by
	     for(lastprice in lastprices)
	     {
	       if(length(lastprices[lastprice])>maxprice)
	         {maxprice=length(lastprices[lastprice])}
	     }
           #print results
             for(lastprice in lastprices)
	     {
	       printf("%-9s : %*s\n",lastprice,maxprice,lastprices[lastprice])
             }
             }' | sort)
    ;;
  hist-ord)
    OUTPUT=$(echo "$FILTER_INPUT" | awk -F ';' -v wd="$WIDTH" \
	   '{
           #count number of transactions for each ticker and find maximal
	     ticks[$2]+=1
	     if(ticks[$2]>maxcount)
	       {maxcount=ticks[$2]}
           }END{
	   #set default or input value to represent one unit in graph
	     x=1
	     if(wd != "")
	       {x=maxcount/wd}
	   #print results
	     for(tick in ticks)
	       {
		 printf("%-9s : ",tick);
		 for(i=x;i<=ticks[tick];i+=x)
	           {printf("#")
	       }
             printf("\n")
            }
           }' | sort)
    ;;
  graph-pos)
    OUTPUT=$(echo "$FILTER_INPUT" | awk -F ';' -v wd="$WIDTH" \
	   'function abs(x){return((x<0.0) ? -x : x)}
	   {
           #store value for each ticker in array ticks
             if($3 == "buy")
	       {ticks[$2] += $6}
	     if($3 == "sell")
	       {ticks[$2] -= $6}
	   #find last price for each ticker
	     if($1 > lastdate[$2])
	       {lastdate[$2] = $1; lastprice[$2]=$4}
           }END{
	   #values of currently held positions and find max absolute value
	     for(tick in ticks)
	       {
		 price[tick]=ticks[tick]*lastprice[tick]
		 if(int(abs(price[tick])) > maxprice)
	           {maxprice=int(abs(price[tick]))}
	       } 
           #set default or input value to represent one unit in graph
             x=1000
	     if(wd != "")
	       {x=maxprice/wd}
	   #print results differentiating between positive and negative values
	     for(tick in ticks)
	       {
		 printf("%-9s : ",tick)
		 if(price[tick]<0)
	           {
	             for(i=-x;i>=price[tick];i-=x)
		       {printf("!")}
	           }
		 if(price[tick]>0)
	           {
	             for(i=x;i<=price[tick];i+=x)
		       {printf("#")}
	           }
	         printf("\n")
	       }
             }' | sort)
    ;;
  *)
  OUTPUT="$FILTER_INPUT"
    ;;
esac

echo "$OUTPUT"
